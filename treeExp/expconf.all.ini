[DEFAULT]
blockname      = unknown ;
save_extension = all     ; default extension for saving

; text options
; -------------
patchIntroText   = nothing ; 
breakText        = \n \n You may take a short break \n \n [Press Spacebar to continue] ;

; reward display
;----------------
showScorePerTrial          = 0         ; whether to display score on each trial (0=no)
numApplePerRow             = 5         ; num apples displayed per row
randomApplePosition        = 1

; block colors
; -------------
ncolors = 4                      ; num colors, should match num enviro types. if 2, will take 1,2
; color1 = 105,144,86             ; equal saturation and luminosity (50) - green 
; color1 = 86,106,144            ; equal saturation and luminosity (50) -  purple/blue 
; color2 = 144,124,86             ; equal saturation and luminosity (50) - brown 
color_instruction = 150,150,150  ; color for instructions, grey
color1 = 125,112,145           ; equal saturation and luminosity (60), purple-blue
color2 = 129,128,68            ; equal saturation and luminosity (60), army green
color3 = 160,103,106           ; equal saturation and luminosity (60), red/brown
color4 = 69,134,140            ; equal saturation and luminosity (60), turquoise
fixationShape = cross          ; shape of the fixation

shakeTree = 0                  ; whether to shake the tree when apples are harvested
forceStayFirstHarvest = 0      ; even if user presses exits it stays on first tree harvest

; patch parameters
; -----------------
bgcolortype    = 1    ; default value for patch not specifying a type
R0_m           = 10   ; mean for initial R0 draw for each patch
R0_sd          = 1    ; sd for initial R0 draw for each patch
Rmax           = 15   ; maximum reward aload
delta_a        = 22.3784  ; alpha parameter of beta distribution (in matlab, mean=0.92, var = 0.0029, quantile crossing=0.1)
delta_b        = 1.9459 ; alpha parameter of beta distribution
t              = 1    ; + delayToDecision + delaytTooSlow + appleTime = t in simulation
d              = 2    ; + delayToDecision + delaytTooSlow             = d in simulation
cutoff         = 0.5  ; smallest R cutoff, if greater, R = 0. 0.5 will give half an apple
delta_distr    = beta ; distribution for the draw of the depletion rate

; task irrelevant rewards (on/off)
; ---------------------------------
poissonRewardMode = 0 ;
; 0 -> no irrelevant reward
; 1 -> only show irrelevant reward
; 2 -> only play sound for irrelevant reward
; 3 -> both show and play

showPoissonRewardDelay	= 2  ; how long irrelevant reward message is displayed
pr_rate        = 10          ; Poisson rate: should be the mean delay between 2 rewards in seconds
pr_m           = 0.3         ; Irrelevant reward value mean: gaussian distributed
pr_sd          = 0.1         ; Irrelevant reward value sd:   gaussian distributed

; ticker
; ------
ticker.speed  = 30
ticker.speed2 = 10
ticker.show  = 1
